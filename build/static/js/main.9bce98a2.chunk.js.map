{"version":3,"sources":["containers/App.js","serviceWorker.js","index.js"],"names":["App","props","console","log","togglepeopleHandler","doesShow","state","showpeople","setState","deletepeopleHandler","people_index","del_people","data_list","splice","people","p_name","p_age","id","people_info","axios","get","then","response","data","entries","nextProps","nextState","this","person_list","map","gh","i","key","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gUA4GeA,E,kDAnGb,WAAYC,GACX,IAAD,6BACEC,QAAQC,IAAI,uBACZ,cAAMF,IAuDRG,oBAAsB,WACpB,IAAMC,EAAW,EAAKC,MAAMC,WAC5B,EAAKC,SAAS,CAACD,YAAcF,KA3D/B,EA8DAI,oBAAsB,SAACC,GACrB,IAAMC,EAAU,YAAO,EAAKL,MAAMM,WAClCD,EAAWE,OAAOH,EAAa,GAC/B,EAAKF,SAAS,CAACI,UAAUD,KA9DzB,EAAKL,MAAO,CAEVM,UAAU,GACVE,OAAO,CAAC,CAACC,OAAO,aAAaC,MAAM,KAAKC,GAAI,GAAI,CAACF,OAAO,eAAeC,MAAM,KAAKC,GAAG,GAAG,CAACF,OAAO,OAAOC,MAAM,KAAKC,GAAG,IAErHC,YAAY,yBACZX,YAAW,GATf,E,gEA+BoB,IAAD,OACjBL,QAAQC,IAAI,4BACZgB,IAAMC,IAAI,oHACTC,MAAK,SAACC,GACL,EAAKd,SAAS,CAACI,UAAYU,EAASC,KAAKC,e,4CAWvBC,EAAUC,GAE9B,OADAxB,QAAQC,IAAI,kCACL,I,2CAGPD,QAAQC,IAAIwB,KAAKrB,MAAMM,UAAU,IACjCV,QAAQC,IAAI,+B,+BAiBZD,QAAQC,IAAI,iBACZ,IAAIyB,EAAY,KAiBhB,OAhBID,KAAKrB,MAAMC,aAEbqB,EACE,6BAGE,4BAEUD,KAAKrB,MAAMM,UAAUiB,KAAI,SAACC,EAAGC,GAAJ,OAAU,wBAAIC,IAAKD,GAAID,SAS9D,yBAAKG,UAAU,OACb,6EACA,4BAAQC,QAASP,KAAKvB,qBAAtB,qBACCwB,M,gDAlEyB3B,EAAOK,GAGrC,OAFAJ,QAAQC,IAAI,mCAELG,M,GA/BO6B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.9bce98a2.chunk.js","sourcesContent":["import React from 'react';\nimport {Component} from 'react'\nimport './App.css';\n// import Person from '../components/persons/Person/person'\nimport axios from 'axios'\n// import Persons from '../components/persons/persons'\n\nclass App extends Component{\n\n  constructor(props)\n  {\n    console.log('App.js constructor')\n    super(props);\n    this.state ={\n      \n      data_list:[],\n      people:[{p_name:'amit Yadav',p_age:'30',id :1,},{p_name:'shweta Yadav',p_age:'32',id:2},{p_name:'usha',p_age:'34',id:3}],\n  \n      people_info:'belong to same family ',\n      showpeople:false,\n      \n    }\n  }\n  // use inside constructor or decleare globally\n\n  // state ={\n\n  //   people:[{p_name:'amit Yadav',p_age:'30',id :1,},{p_name:'shweta Yadav',p_age:'32',id:2},{p_name:'usha',p_age:'34',id:3}],\n\n  //   people_info:'belong to same family ',\n  //   showpeople:false,\n    \n  // }\n\n  \n  static getDerivedStateFromProps(props, state){\n    console.log('App.js GetDerivedStateFromProps')\n\n    return state\n  }\n\n  componentDidMount(){\n    console.log('App.js componentDidMount')\n    axios.get('https://cors-anywhere.herokuapp.com/https://api.pipelinedeals.com/api/v3/deals.json?api_key=tFTM3grWXS1SYVmfM7B2')\n    .then((response)=>{\n      this.setState({data_list : response.data.entries}) ;\n\n      //console.log(response.data.entries)\n    \n    });\n\n    \n    \n    return \n  }\n\n  shouldComponentUpdate(nextProps,nextState){\n    console.log('App.js should componentUpdate')\n    return true\n  }\n  componentDidUpdate(){\n    console.log(this.state.data_list[0])\n    console.log('App.js componentDidUpdate')\n\n  }\n\n\n  togglepeopleHandler = () => {\n    const doesShow = this.state.showpeople ;\n    this.setState({showpeople : !doesShow})\n  }\n\n  deletepeopleHandler = (people_index) => {\n    const del_people = [...this.state.data_list]\n    del_people.splice(people_index,1)\n    this.setState({data_list:del_people})\n  }\n\n  render(){\n    console.log('App.js render')\n    let person_list=null;\n    if (this.state.showpeople)\n    {\n      person_list=(\n        <div>\n          {/* <Persons people={this.state.data_list}\n                  clicked ={this.deletepeopleHandler}/> */}\n          <ul>\n                {\n                    this.state.data_list.map((gh,i )=> <li key={i}>{gh}</li>)\n                }\n            </ul>\n\n        </div> \n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Leads data from pipelinedeals website  â€‹</h1>\n        <button onClick={this.togglepeopleHandler}>click here to get</button>\n        {person_list}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}